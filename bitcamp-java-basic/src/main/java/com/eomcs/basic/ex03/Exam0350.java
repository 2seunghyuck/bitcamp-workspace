// 주제: 부동소수점의 2진수 정규화 (2진수로 변환하기)
// .class file 을 Hexdump 해서 공식이 맞는지 확인

package com.eomcs.basic.ex03;

class Exam0350 {
  public static void main(String[] args) {
    System.out.println(12.375f);
    System.out.println(12.375);
    System.out.println(-12.375f);
    // 12.375 (부동소수점) 정규화 결과
    // ==> IEEE 754 규정에 따라 부동 소수점을 2진수로 변환한다.
    // ==> 0100 0001 0100 0110 0000 0000 0000 0000 (2진수)
    // ==> 4146 0000 (16진수)
  }
}

// 방법 
// 1) 정수 부분을 2진수로 변환 
// - 12
// - 1100(2진수)
//
// 2) 소수점 이하 부분을 2진수로 변환 
// - .375
// - 소수점을 2로 곱하여 나온 결과에서 정수 부분만을 차례대로 표기한다.
// - 소수 부분이 0이거나 반복되면 계산을 멈춘다.
// - 예: 0.375(10진수)
// 0.375 * 2 = 0.75  --> 0
// 0.75 * 2  = 1.5   --> 1
// 0.5 * 2   = 1.0   --> 1
// => 0.011(2진수)
//
// 3) 2진수 바꾼 최종 결과
// 12.375(10진수)
// = 12(10진수) + 0.375(10진수)
// = 1100(2진수) + 0.011(2진수)
// = 1100.011(2진수)
// = 1*2^3 + 1*2^2 + 0*2^1 + 0*2^0 + 0*2^-1 + 1*2^-2 + 1*2^-3
// = 1*8 + 1*4 + 0*2 + 0*1 + 0*0.5 + 1*0.25 + 1*0.125
// = 
// 4) 정규화
// => 소수점 위치를 조정하여 가수부와 지수부를분리한다.
// => 4.1) 소수점 왼쪽에 1만 남도록 소수점을 이동한다.
//          =1.100011 * 2^3 = 1100.011
// => 4.2) 소수점 왼쪽은 무조건 1이기 때문에 저장하지 않고 버린다.
// => 4.3) 가수부와 지수부로 분리한다.
//      가수부
//        - sign-mag 로 표현한다.
//        - 따라서 음수나 양수나 같은 2진수 값을 갖는다.
//      지수부
//          - 2의 제곱승 값이다.
//          - Excess-K  로 표현한다.
//          - 예) 3(2의 제곱승) + 127(K값) = 130
//                130 = 10000010(2진수)
// => 23번 비트까지 채우지 못하면 나머지 비트는 0으로 채운다. 
// => 4.4) 32비트 메모리에 담기
//      - [부호비트(1)][지수부(8)][가수부(23)]
//      예) 0_10000010_10001100000000000000000
//          0100_0001_0100_0110_0000_0000_0000_0000 (2진수)
//          4  _ 1  _ 4  _ 6  _ 0  _ 0  _ 0  _ 0   (16진수)
// => 4.5) 64비트 메모리에 담기
//      - [부호비트(1)][지수부(11)][가수부(52)]
//

